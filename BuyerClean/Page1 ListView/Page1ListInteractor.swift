//
//  Page1ListInteractor.swift
//  BuyerClean
//
//  Created by Peanuz on 30/8/2562 BE.
//  Copyright (c) 2562 SCB. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire
import SwiftyJSON

protocol Page1ListViewInteractor
{
    func feedAPI(request:Page1Model.GetAPI.Request)
    func sortPhone(request:Page1Model.Sort.Request.sortCase)
    func selectedPhone(request:Page1Model.Selected.Request)
}

class Page1ListInteractor: Page1ListViewInteractor{
    var presenter: Page1ListPresenterInterface!
    var worker: Page1WokerAPIManager!
    var phons: [Phone] = []
    var selectedPhones: Phone!
    
  // MARK: Do something
  
    func feedAPI(request:Page1Model.GetAPI.Request){
      worker.getAPI { [weak self] result in
        switch result {
        case .success(let phone):
          self?.phons = phone
          let response = Page1Model.GetAPI.Response(success: true, json: phone)
          self?.presenter.presentPage1(response: response)
        case .failure(let error):
          let response = Page1Model.GetAPI.Response(success: false, json: error as! Array<Phone>)
          self?.presenter.presentPage1(response: response)
        }
      }
    }
    
    func selectedPhone(request: Page1Model.Selected.Request) {
        let selectedPhone : Phone = phons[request.indexPath]
        self.selectedPhones = selectedPhone
        presenter.passSelected()
    }
    
    private func sortSet(_ sort: [Phone]){
        let response = Page1Model.Sort.Response(sortPhone: sort)
        self.presenter.sortPage1(response: response)
        self.phons = sort
    }
    
    func sortPhone(request: Page1Model.Sort.Request.sortCase) {
        switch request{
        case .lowToHight:
            let sort  = phons.sorted(by: { $0.price < $1.price })
            sortSet(sort)
        case .hightToLow:
            let sort = phons.sorted(by: { $0.price > $1.price })
            sortSet(sort)
        case .raing:
            let sort = phons.sorted(by: { $0.rating > $1.rating })
            sortSet(sort)
        }
    }
}
